// is unidirected graph is tree or not?
// Graph is tree if,
//   #1 there is no loop
//   #2 there is all nodes are connected (there is no forest or islands!)

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include <iostream>
using namespace std;

class myGraph {

public:
  vector<vector<int>> graph;
  // init 
  myGraph(int n) : graph(n, vector<int>(n, 0)) {}

	bool  // return true if cycle false otherwise
	dfs(vector<vector<int>> graph, int size, bool *visited, int parent, int vertex) {
		visited[vertex] = true;

		for (int j = 0; j < size; j++) {
			if (graph[vertex][j]) {
				if (visited[j] == false) {
					// if subsequent traverse detected loop, return false
					if (dfs(graph, size, visited, vertex, j)) {
						// loop detected, not a tree. return false
						return true;
					}
				} else if (j != parent) {      
					 return true;
				}
			}
		}
		return false;
	}

	bool
	isTree() {
		int count = 0; 
		int size = graph[0].size();
		bool visited[size];
		
		// init visited array
		for (int i = 0; i < size; i++) {
			visited[i] = 0;
		}

		// traverse graph in DFS, starting at vertex 0
		// if dfs finds any vertx already visited it is not a tree
		if (dfs(graph, size, visited, -1, 0) == true) {
			return false;
		}

		// After DFS traverse if any vertex is not visited, its not tree
		// this means there are more than one disjoined graphs (aka forest or islands)
		for (int i = 0; i < size; i++) {
			if (visited[i] == 0) {
				return false;
			}
		}

		// checked all conditions, Graph is a tree
		return true;
	}

	void
	addEdge(int i, int j) {
		graph[i][j] = 1;
		graph[j][i] = 1;
	}

	void
	printGraph() {
		int size = graph[0].size();

		for (int i = 0; i < size; i++) {
			cout << "{";
			for (int j = 0; j < size; j++) {
				cout << graph[i][j] << ", ";
			}
			cout << "}" << endl;
	 }
	}
};

/*
     0
    / \
   1   2
        \
         3
*/
int
main() {
  myGraph G1(4);
	G1.addEdge(0, 1);
	G1.addEdge(0, 2);
	G1.addEdge(2, 3);
  G1.printGraph();
  printf("graph is %s\n", G1.isTree() == true ? "a tree" : "not a tree");

  myGraph G2(5);
	G2.addEdge( 1, 0);
	G2.addEdge( 0, 2);
	G2.addEdge( 0, 3);
	G2.addEdge( 3, 4);
  G2.printGraph();
  printf("graph1 is %s\n", G2.isTree() == true ? "a tree" : "not a tree");
  return 0;
}
